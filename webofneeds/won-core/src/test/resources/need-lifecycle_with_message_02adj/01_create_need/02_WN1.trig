##################################################################
#              NEED REPRESENTATION AT THE WON NODE               #
##################################################################

@prefix : <http://www.example.com/resource/need/randomNeedID_1> .
@prefix webID:  <http://www.example.com/webids/> .

@prefix won:    <https://w3id.org/won/model#> .
@prefix crypt:  <https://w3id.org/won/cryptography#> .
@prefix msg:    <https://w3id.org/won/message#> .

@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#>
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix tio:    <http://purl.org/tio/ns#> .
@prefix gr:     <http://purl.org/goodrelations/v1#> .


############# NEED META INFO ##############
# document URL: http://www.example.com/resource/need/randomNeedID_1/meta (:randomNeedID_1/meta)

#GRAPH 
<http://www.example.com/resource/need/randomNeedID_1/meta#data> {

    :
        won:hasNeedEvents
            <http://www.example.com/resource/need/randomNeedID_1/needEvents> ;
        won:hasConnections
            <http://www.example.com/resource/need/randomNeedID_1/connections> ;

        won:isInState
            won:Active ;
        won:hasFacet
            won:ChatFacet .
	# would require constant resigning?
    <http://www.example.com/resource/need/randomNeedID_1/needEvents>
            rdfs:member
                <http://www.example.com/resource/need/randomNeedID_1/event/0> .

}

<http://www.example.com/resource/need/randomNeedID_1/meta#data>
    crypt:hasSignature [
        a crypt:WonSignature ;
        crypt:signer webID:WN1
    ] .

############# NEED CORE CONTENT ##############
# document URL: http://www.example.com/resource/need/randomNeedID_1/core (:randomNeedID_1/core)

#GRAPH 
<http://www.example.com/resource/need/randomNeedID_1/core#data> {
  : a won:Need ;
    won:hasBasicNeedType won:Supply ;
    won:hasContent
      # see issue https://github.com/researchstudio-sat/webofneeds/issues/42
      [
        a tio:Taxi
      ] .
}

# extracted from the message
<http://www.example.com/resource/need/randomNeedID_1/core#data> crypt:hasSignature
      [
        a crypt:WonSignature ;
        crypt:signer webID:owner_1
        # signature data ...
       ] .


############# NEED TRANSIENT CONTENT ##############
# document URL: http://www.example.com/resource/need/randomNeedID_1/transient (:randomNeedID_1/transient)

# GRAPH
<http://www.example.com/resource/need/randomNeedID_1/transient#data> {
  : won:hasContent
    [
      gr:condition "Has been vacuumed three days ago!"
    ]
}

# extracted from the message
<http://www.example.com/resource/need/randomNeedID_1/transient#data> crypt:hasSignature
      [
        a crypt:WonSignature ;
        crypt:signer webID:owner_1
        # signature data ...
      ] .


############# NEED MESSAGE 0 ##############
# document URL: http://www.example.com/resource/need/randomNeedID_1/event/0 (:randomNeedID_1/event/0)

#GRAPH 
<http://www.example.com/resource/need/randomNeedID_1/event/0#data> {
  <http://www.example.com/resource/need/randomNeedID_1/event/0>
    a msg:CreateMessage ;

    msg:hasSenderNeed <http://www.example.com/resource/need/randomNeedID_1> ;
    msg:hasReceiverNode <http://www.example.com> ;

    msg:hasContent <http://www.example.com/resource/need/randomNeedID_1/core> ;
    msg:hasContent <http://www.example.com/resource/need/randomNeedID_1/transient> .

  <http://www.example.com/resource/need/randomNeedID_1/core#data> crypt:hasSignature
      [
        a crypt:WonSignature ;
        crypt:signer webID:owner_1
        # signature data ...
       ] .
  <http://www.example.com/resource/need/randomNeedID_1/transient#data> crypt:hasSignature
      [
        a crypt:WonSignature ;
        crypt:signer webID:owner_1
        # signature data ...
      ] .
}

<http://www.example.com/resource/need/randomNeedID_1/event/0#data>
    crypt:hasSignature
    [
      a crypt:WonSignature ;
      crypt:signer webID:owner_1
      # signature data ...
    ] .
