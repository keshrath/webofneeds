PREFIX mod: <https://w3id.org/won/modification#>
PREFIX agr: <https://w3id.org/won/agreement#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX msg: <https://w3id.org/won/message#>
PREFIX won: <https://w3id.org/won/model#>

CONSTRUCT { ?openprop agr:proposesToCancel ?acc . }
WHERE {
    
   filter (?prop != ?clause) .
   filter (?prop != ?acc) .
 #  filter (?openprop != ?something) .
 
   GRAPH ?openg1 {   
        ?openprop agr:proposesToCancel ?acc .
    }     
    # something does not have to be ?acc, that is an agreement, but we do not want it if it is...
      
      GRAPH <urn:x-arq:UnionGraph> {   
         ?openprop msg:hasPreviousMessage+/msg:hasCorrespondingRemoteMessage? ?acc . 
      }
     # I am going to assume that there is a temporal ordering....it is a valid propose to cancel...it just has not been accepted....
    
      GRAPH ?g11 {   
        ?acc msg:hasContent ?clauseContento .
     }
     
     GRAPH ?g1 {   
        ?prop agr:proposes ?clause .
     }
           
     GRAPH ?clauseContento {
      ?opens ?openp ?openo .
     }
           
     GRAPH ?g3 {
        ?clause msg:hasContent ?clauseContent .
     }    
           
      # Note: for this pattern, we need the union of all graphs that contain msg:hasPreviousMessage triples,
    # Jena provides the special graph name <urn:x-arq:UnionGraph> for querying the union of all the query's graphs
    # THIS QUERY WILL ONLY WORK WITH JENA
      GRAPH <urn:x-arq:UnionGraph> {
        ?prop msg:hasPreviousMessage+/msg:hasCorrespondingRemoteMessage? ?clause .
        ?acc msg:hasPreviousMessage+/msg:hasCorrespondingRemoteMessage ?prop .
      }
    GRAPH ?g2 {
        ?acc agr:accepts ?prop .
    }
          
    
      # only report the first agreement if there are multiple accept messages:
    # make sure there is no earlier accept message than acc, 
    # and if there is an accept message that is at the same point in the conversation 
    # only accept the main solution if acc is lexicographically smaller than the other one
    filter not exists {
        #find another accept message
        filter(?acc2 != ?acc) . #different from acc
        GRAPH ?gf1 {
            ?acc2 agr:accepts ?prop .
        }   
           GRAPH <urn:x-arq:UnionGraph> {
            # also after prop
            ?acc2 msg:hasPreviousMessage+/msg:hasCorrespondingRemoteMessage ?prop .
            # acc2 must not be before acc. If it is parallel, use lexicographically first uri
            filter exists {
                # if there is a path from acc to acc2, acc2 is earlier and we want the
                # overall solution to be discarded.
                ?acc msg:hasPreviousMessage+ ?acc2.
            }   
        }     
    }
               
     # only report the first agreement if there are multiple accept messages:
    # make sure there is no earlier accept message than acc, 
    # and if there is an accept message that is at the same point in the conversation 
    # only accept the main solution if acc is lexicographically smaller than the other one
    filter not exists {
        #find another accept message
                  filter(?acc2 != ?acc) . #different from acc
        GRAPH ?gf1 {
            ?acc2 agr:accepts ?prop .
        }   
          GRAPH <urn:x-arq:UnionGraph> {
            # also after prop
            ?acc2 msg:hasPreviousMessage+/msg:hasCorrespondingRemoteMessage ?prop .
            # acc2 must not be before acc. If it is parallel, use lexicographically first uri
            filter not exists {
                # if there is a path from acc to acc2, acc2 is earlier and we want the
                # overall solution to be discarded.
                ?acc msg:hasPreviousMessage+ ?acc2.
            }
            filter (STR(?acc2) < STR(?acc)) 
            }
        }
               
    filter not exists {
      
      filter (?cancelProp != ?acc) .
      filter (?cancelAcc != ?cancelProp) .
      
      GRAPH ?gc1 {   
          ?cancelProp agr:proposesToCancel ?acc .
      }
      # Note: for this pattern, we need the union of all graphs that contain msg:hasPreviousMessage triples,
      # Jena provides the special graph name <urn:x-arq:UnionGraph> for querying the union of all the query's graphs
      # THIS QUERY WILL ONLY WORK WITH JENA
       GRAPH <urn:x-arq:UnionGraph> {    
          ?cancelProp msg:hasPreviousMessage+/msg:hasCorrespondingRemoteMessage? ?acc .
          ?cancelAcc msg:hasPreviousMessage+/msg:hasCorrespondingRemoteMessage ?cancelProp .
       }
      GRAPH ?gc2 {
          ?cancelAcc agr:accepts ?cancelProp .
      }  
      GRAPH ?gc3 {
          ?cancelProp msg:hasContent ?gc1.  
      }
      GRAPH ?gc4 {
          ?cancelAcc msg:hasContent ?gc2.  
      }
                  
}
                             
}
order by ?openprop